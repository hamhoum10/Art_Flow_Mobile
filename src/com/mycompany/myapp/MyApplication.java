package com.mycompany.myapp;


import com.codename1.charts.models.XYMultipleSeriesDataset;
import com.codename1.demos.charts.BudgetPieChart;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import gui.Stock.AddStockForm;
import gui.Stock.ShowStockForm;
import entities.livraison;
import gui.livraiosn.AddLivraisonForm;
import gui.LoginForm;
import gui.livraiosn.ShowLivraisonForm;
import gui.livraiosn.modifyLivraisonForm;
import gui.retour.AddRetourForm;
import gui.retour.ShowRetourForm;
import gui.retour.stat;

import java.util.ArrayList;
import java.util.List;
import services.LivraisonServices;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
//      Form a = new AddLivraisonForm(theme);
        livraison b = new livraison(86, "tt", "tt", "tt", "2000-12-12", 14, "tt") ;
        
       

//      Form a = new modifyLivraisonForm(b, theme);
//LivraisonServices as = LivraisonServices.getInstance();
        //System.out.println(as.SMSlivraison());
//          new ShowRetourForm(theme).show();
stat s = new stat();
          Form pieChartForm = s.createPieChartForm();
            pieChartForm.show();
          
           
 
        
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

}
